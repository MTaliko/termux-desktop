#!/data/data/com.termux/files/usr/bin/bash
R="$(printf '\033[1;31m')"                           
G="$(printf '\033[1;32m')"
Y="$(printf '\033[1;33m')"
B="$(printf '\033[1;34m')"
C="$(printf '\033[1;36m')"                                       
W="$(printf '\033[0m')"
BOLD="$(printf '\033[1m')"
config_file="$PREFIX/etc/termux-desktop/configuration"

function banner() {
clear
echo "${Y} ▀█▀ █▀▀ █▀█ █▀▄▀█ █░█ ▀▄▀   █▀▄ █▀▀ █▀ █▄▀ ▀█▀ █▀█ █▀█ "${W}
echo "${Y} ░█░ ██▄ █▀▄ █░▀░█ █▄█ █░█   █▄▀ ██▄ ▄█ █░█ ░█░ █▄█ █▀▀ "${W}
echo
echo "${C}${BOLD} Install Gui Desktop In Termux"${W}
echo "${C}${BOLD} code by @sabamdrif"${W}
echo
}

#########################################################################
############################### Shortcut Functions ######################
#########################################################################

function check_and_create_directory() {
    if [[ ! -d "$1" ]]; then
        mkdir -p "$1"
    fi
}

function check_and_delete() {
	 local list=("$@")
    for file in "${list[@]}"; do
        if [[ -e "$file" ]]; then
            if [[ -d "$file" ]]; then
                rm -rf "$file"
            else
                rm -f "$file"
            fi
        fi
    done
}

function check_and_backup() {
	if [[ -e "$1" ]]; then
        local backup="${1}.bak"
        if [[ -e "$backup" ]]; then
            echo "${G}Backup file ${C}${backup} ${G}already exists."${W}
            return 1
        fi
        mv "$1" "$backup"
    fi
}

function check_and_restore() {
        local backup="${1}.bak"
        if [[ -e "$backup" ]]; then
            mv "$backup" "$1"
		else
		echo "${G}Backup file ${C}${backup} ${G}does not exists."${W}
        fi
        
}

function package_install_and_check() {
	packs_list=($@)
for package_name in "${packs_list[@]}"; do
    echo "${R}[${W}-${R}]${G}${BOLD} Installing package: ${C}$package_name ${W}"
    apt install "$package_name" -y
    if [ $? -ne 0 ]; then
        echo "${R}[${W}-${R}]${G}${BOLD} Error detected during installation of: ${C}$package_name ${W}"
        apt --fix-broken install -y
        dpkg --configure -a
        apt install "$package_name" -y
    fi
    if dpkg -s "$package_name" >/dev/null 2>&1; then
        echo "${R}[${W}-${R}]${G} $package_name installed successfully ${W}"
    else
        if type -p "$package_name" &>/dev/null || [ -e "$PREFIX/bin/$package_name"* ] || [ -e "$PREFIX/bin/"*"$package_name" ]; then
            echo "${R}[${W}-${R}]${C} $package_name ${G}installed successfully ${W}"
        fi
    fi
done
echo ""
}

function package_check_and_remove() {
	packs_list=($@)
	for package_name in "${packs_list[@]}"; do
	if dpkg -s "$package_name" >/dev/null 2>&1; then
	echo "${R}[${W}-${R}]${G}${BOLD} Removeing package: ${C}$package_name "${W}
    apt autoremove "$package_name" -y
    fi
done

}

function get_file_name_number() {
    current_file=$(basename "$0")
    folder_name="${current_file%.sh}"
    theme_number=$(echo "$folder_name" | grep -oE '[1-9][0-9]*')
}

function extract_archive() {
	set -e
	local archive="$1"
	total_size=$(stat -c '%s' "$archive")
	case "$archive" in
    *.tar.gz)
        pv -s $total_size -p -r "$archive" | tar xzf -
        ;;
    *.tar.xz)
        pv -s $total_size -p -r "$archive" | tar xJf -
        ;;
    *.tar)
        pv -s $total_size -p -r "$archive" | tar xf -
        ;;
    *)
        echo "${R}Unsupported archive format: ${C}$archive"${W}
        exit 1
        ;;
esac

}

function download_and_extract() {
    local url="$1"
    local target_dir="$2"
    local filename="${url##*/}"

    echo "${C}${BOLD}Downloading ${G}${filename}..."${W}
    sleep 1.5

    cd "$target_dir" || return 1

    local attempt=1
    local success=false

    while [[ $attempt -le 3 ]]; do
        if [[ $filename == *.tar.gz ]]; then
            if curl -# -L "$url" -o "$filename"; then
			echo ""
			    extract_archive "$filename"
                rm "$filename"
                success=true
                break
            fi
        elif [[ $filename == *.tar ]]; then
            if curl -# -L "$url" -o "$filename"; then
			echo ""
                extract_archive "$filename"
                rm "$filename"
                success=true
                break
            fi
        elif [[ $filename == *.tar.xz ]]; then
            if curl -# -L "$url" -o "$filename"; then
			echo ""
                extract_archive "$filename"
                rm "$filename"
                success=true
                break
            fi
        fi

        echo "Failed to download ${filename}"
        echo "Retrying... Attempt $attempt"
        ((attempt++))
        sleep 1
    done

    if [[ "$success" = false ]]; then
        echo "${R}Failed to download ${C}${filename}${W}"
        echo "${C}Please check your internet connection${W}"
    fi
}

function count_subfolders() {
    local owner="$1"
    local repo="$2"
    local path="$3"
    local url="https://api.github.com/repos/$owner/$repo/contents/$path"
    local response=$(curl -s "$url")
    local subfolder_count=$(echo "$response" | jq -r '.[] | select(.type == "dir") | .name' | wc -l)
    echo "$subfolder_count"
}

function confirmation_y_or_n() {
	 while true; do
        read -p "${R}[${W}-${R}]${Y}${BOLD} $1 ${Y}(y/n) "${W} response
        response="${response:-y}"
        eval "$2='$response'"
        case $response in
            [yY]* )
                echo "${R}[${W}-${R}]${G}Continuing with answer: $response"${W}
				sleep 0.3
                break;;
            [nN]* )
                echo "${R}[${W}-${R}]${C}Skipping this setp"${W}
				sleep 0.3
                break;;
            * )
               	echo "${R}[${W}-${R}]${R}Invalid input. Please enter 'y' or 'n'."${W}
                ;;
        esac
    done

}

function get_latest_release() {
	local repo_woner="$1"
	local repo_name="$2"
  curl -s "https://api.github.com/repos/$repo_woner/$repo_name/releases/latest" |
  grep '"tag_name":' |
  sed -E 's/.*"([^"]+)".*/\1/'
}

function install_font_for_style() {
	local style_number="$1"
	echo "${R}[${W}-${R}]${G}Installing Fonts..."${W}
	check_and_create_directory "$HOME/.fonts"
	cd $HOME/.fonts
	wget https://raw.githubusercontent.com/MTaliko/termux-desktop/main/patch/xfce/look_${style_number}/font.tar.gz
	tar -xzvf font.tar.gz
	rm font.tar.gz
	fc-cache -f
	cd
}

#########################################################################
########################## Ask Required Questions #######################
#########################################################################

function questions_theme_select() {
    local owner="sabamdarif"
    local repo="termux-desktop"
    local main_folder="patch/xfce"
    local subfolder_count_value=$(count_subfolders "$owner" "$repo" "$main_folder")
	cd $HOME
    wget -O styles.md https://raw.githubusercontent.com/MTaliko/termux-desktop/main/xfce_styles.md
	banner
    if [[ -n "$subfolder_count_value" ]]; then
        echo "${R}[${W}-${R}]${G}Check the xfce styles section in github"${W}
		echo
		echo "${R}[${W}-${R}]${B}https://github.com/MTaliko/termux-desktop/blob/main/xfce_styles.md"${W}
		echo
        echo "${R}[${W}-${R}]${G}Number of avilable custom styles for xfce is: ${C}${subfolder_count_value}"${W}
		echo
        echo "${R}[${W}-${R}]${G}Available Styles:${W}"
		echo
grep -oP '## \d+\..+?(?=(\n## \d+\.|\Z))' styles.md | while read -r style; do
    echo "${Y}${style#### }${W}"
done
        while true; do
		    echo
            read -p "${R}[${W}-${R}]${Y}Type number of the style (Default 1): "${W} style_answer
            style_answer=${style_answer:-1}
            if [[ "$style_answer" =~ ^[0-9][0-9]*$ ]] && [[ "$style_answer" -le "$subfolder_count_value" ]]; then
			style_name=$(grep -oP "^## $style_answer\..+?(?=(\n## \d+\.|\Z))" styles.md | sed -e "s/^## $style_answer\. //" -e "s/:$//")
                break
            else
			    echo
                echo "${R}The entered style number is incorrect."${W}
				echo
                echo "${R}[${W}-${R}]${Y}Please enter a number between 0 to ${subfolder_count_value}"${W}
				echo
				echo "${R}[${W}-${R}]${G}Check the xfce styles section in github"${W}
				echo
				echo "${R}[${W}-${R}]${B}https://github.com/MTaliko/termux-desktop/blob/main/xfce_styles.md"${W}
				echo
            fi
	done
	rm styles.md
	 else
        echo "${R}Failed to get total avilable styles value."${W}
    fi
}

function questions() {
	# banner
	# echo "${R}[${W}-${R}]${G}Select Desktop Environment"${W}
	# echo
	# echo "${Y}1. XFCE"${W}
	# echo
	# echo "${Y}2. LXQT"${W}
	# echo 
	# read -p "${Y}select an option (Default 1): "${W} desktop_answer
	# echo
	banner
	questions_theme_select
	banner
	echo "${R}[${W}-${R}]${G}${BOLD}Select browser you want to install"${W}
	echo
	echo "${Y}1. firefox"${W}
	echo
	echo "${Y}2. chromium"${W}
	echo 
	echo "${Y}3. firefox & chromium (both)"${W}
	echo
	echo "${Y}4. Skip"${W}
	echo
	read -p "${Y}select an option (Default 1): "${W} browser_answer
	browser_answer=${browser_answer:-1} 
	echo
	echo "${R}[${W}-${R}]${G}Continuing with answer: $browser_answer"${W}
	sleep 0.2
	banner
	echo "${R}[${W}-${R}]${G}${BOLD}Select IDE you want to install"${W}
	echo
	echo "${Y}1. VS Code"${W}
	echo
	echo "${Y}2. Geany (lightweight IDE)"${W}
	echo
	echo "${Y}3. Vlc & Audacious (both)"${W}
	echo
	echo "${Y}4. Skip"${W}
	echo
	read -p "${Y}select an option (Default 1): "${W} ide_answer
	ide_answer=${ide_answer:-1} 
	echo
	echo "${R}[${W}-${R}]${G}Continuing with answer: $ide_answer"${W}
	sleep 0.2
	banner
	echo "${R}[${W}-${R}]${G}${BOLD}Select Media Player you want to install"${W}
	echo
	echo "${Y}1. Vlc"${W}
	echo
	echo "${Y}2. Audacious"${W}
	echo 
	echo "${Y}3. Vlc & Audacious (both)"${W}
	echo
	echo "${Y}4. Skip"${W}
	echo
	read -p "${Y}select an option (Default 1): "${W} player_answer
	player_answer=${player_answer:-1} 
	echo
	echo "${R}[${W}-${R}]${G}Continuing with answer: $player_answer"${W}
	sleep 0.2
	banner
	echo "${R}[${W}-${R}]${G}${BOLD}Select Photo Editor"${W}
	echo
	echo "${Y}1. Gimp"${W}
	echo
	echo "${Y}2. Inkscape"${W}
	echo 
	echo "${Y}3. Gimp & Inkscape (both)"${W}
	echo
	echo "${Y}4. Skip"${W}
	echo
	read -p "${Y}select an option (Default 1): "${W} photo_editor_answer
	photo_editor_answer=${photo_editor_answer:-1} 
	echo
	echo "${R}[${W}-${R}]${G}Continuing with answer: $photo_editor_answer"${W}
	sleep 0.2
	banner
	confirmation_y_or_n "Do you want to install a graphical package manager [Synaptic]" synaptic_answer
	banner
	echo "${R}[${W}-${R}]${G} By Default it only add 4 - 5 wallpaper"${W}
	echo
	confirmation_y_or_n "Do you want to add some more wallpaper" ext_wall_answer
    banner
	echo "${R}[${W}-${R}]${G}${BOLD}Do you want to install wine in termux ${C}(without proot-distro)"${W}
	echo
	echo "${Y}1. Natively ${C}(can run only arm64 based exe) (Default)"${W}
	echo
	echo "${Y}2. Using Mobox ${C}(best)"${W}
	echo
	echo "${R}[${W}-${R}]${B} Know More About Mobox:- https://github.com/olegos2/mobox/"${W}
	echo
	echo "${Y}3. Skip"${W}
	echo
	read -p "${R}[${W}-${R}]${Y}Select Wine Installation Method: "${W} wine_answer
	wine_answer=${wine_answer:-1} 
	echo
	echo "${R}[${W}-${R}]${G}Continuing with answer: $wine_answer"${W}
	sleep 0.2
    banner
	confirmation_y_or_n "Do you want to Configuring Zsh" zsh_answer
	banner
	confirmation_y_or_n "Do you want install some terminal utility to make better terminal exprience" terminal_utility_setup_answer
	banner
	echo "${R}[${W}-${R}]${Y}${BOLD}Do you want to add a distro container (proot distro)"${W}
	echo
	echo "${R}[${W}-${R}]${G} It will help you to install those app which are not avilable in termux"${W}
	echo
	echo "${R}[${W}-${R}]${C}You can launch those installed apps from termux like other apps"${W}
	echo
	confirmation_y_or_n "Do you want to continue" distro_add_answer
	if [[ "$distro_add_answer" == "y" ]] && [[ "$zsh_answer" == "y" ]]; then
	banner
	confirmation_y_or_n "Do you want to Configuring Zsh also for distro container" distro_zsh_answer
	fi
	if [[ "$distro_add_answer" == "y" ]] && [[ "$terminal_utility_setup_answer" == "y" ]]; then
	banner
	confirmation_y_or_n "Do you want install the terminal utility also for distro container" distro_terminal_utility_setup_answer
	fi
	banner
	echo "${R}[${W}-${R}]${G}${BOLD}Select Gui Mode"${W}
	echo
	echo "${Y}1. Termux:x11"${W}
	echo
	echo "${Y}2. Vnc"${W}
	echo 
	echo "${Y}3. Both"${W}
	echo
	read -p "${Y}select an option (Default 1): "${W} gui_mode
	gui_mode=${gui_mode:-1} 
}

function hw_questions() {
    banner
    echo "${R}[${W}-${R}]${G}${BOLD}First Read This"${W}
    echo
    echo "${R}[${W}-${R}]${B}This:- https://github.com/MTaliko/termux-desktop/blob/main/hw-acceleration.md"${W}
    echo
    echo "${R}[${W}-${R}]${G}${BOLD}Select Hardware Acceleration Method Which Support Best Fot Your Device"${W}
    echo
	echo "${Y}1. ZINK"${W}
	echo
    echo "${Y}2. VIRGL"${W}
	echo
	echo "${Y}3. VIRGL ZINK"${W}
	echo
	read -p "${Y}select an option : "${W} termux_hw_answer
	termux_hw_answer=${termux_hw_answer:-1} 
	echo
	echo "${R}[${W}-${R}]${G}Continuing with answer: $termux_hw_answer"${W}
	sleep 0.2
	if [[ "$distro_add_answer" == "y" ]]; then
    echo
    echo "${R}[${W}-${R}]${G}${BOLD}Select Hardware Acceleration Method Distro Container"${W}
    echo
    echo "${R}[${W}-${R}]${G}If You Are Not Sure So Skip It It Will Use The Previous One"${W}
    echo
    echo "${Y}1. ZINK"${W}
	echo
    echo "${Y}2. VIRGL ZINK"${W}
	echo
	echo "${Y}3. Turnip (Adreno GPU Only)"${W}
	echo
	echo "${Y}4. Skip"${W}
	echo
	read -p "${Y}select an option : "${W} pd_hw_answer
	pd_hw_answer=${pd_hw_answer:-1} 
	echo
	echo "${R}[${W}-${R}]${G}Continuing with answer: $pd_hw_answer"${W}
	sleep 0.2
    fi
}

function distro_questions() {
    banner
    echo "${R}[${W}-${R}]${G}${BOLD}Select Distro You Want To Add"${W}
    echo
	echo "${Y}1. Debian"${W}
	echo
	echo "${Y}2. Ubuntu"${W}
	echo 
	read -p "${Y}select an option (Default 1): "${W} distro_answer
	distro_answer=${distro_answer:-1} 
	echo
	echo "${R}[${W}-${R}]${G}Continuing with answer: $distro_answer"${W}
	sleep 0.2
	banner
	confirmation_y_or_n "Do you want to configure audio support for distro container" pd_audio_config_answer
    banner
	confirmation_y_or_n "Do you want to create a normal user account ${C}(Recomended)" pd_useradd_answer
	echo
    if [[ "$pd_useradd_answer" == "n" ]]; then
    banner
    echo "${R}[${W}-${R}]${G}Skiping User Account Setup"${W}
    else
	echo "${R}[${W}-${R}]${G}${BOLD} Select user account type"${W}
    echo
	echo "${Y}1. User with password confirmation"${W}
	echo
	echo "${Y}2. User with no password confirmation"${W}
	echo 
	read -p "${Y}select an option (Default 1): "${W} pd_pass_type
	pd_pass_type=${pd_pass_type:-1}
	echo
	echo "${R}[${W}-${R}]${G}Continuing with answer: $pd_pass_type"${W}
	if [[ "$pd_pass_type" == "1" ]];then
	echo
    echo "${R}[${W}-${R}]${G}${BOLD} Create user account"${W}
    echo
    while true; do
    read -p "${R}[${W}-${R}]${G}Input username [Lowercase]: "${W} user_name
    echo
    read -p "${R}[${W}-${R}]${G}Input Password: "${W} pass
    echo
    read -p "${R}[${W}-${R}]${Y}Do you want to continue with username ${C}$user_name ${Y}and password ${C}$pass${Y} ? (y/n) : "${W} choice
	echo
	choice="${choice:-y}"
	echo
	echo "${R}[${W}-${R}]${G}Continuing with answer: $choice"${W}
	sleep 0.3
    case $choice in
        [yY]* )
            echo "${R}[${W}-${R}]${G}Continuing with username ${C}$user_name ${G}and password ${C}$pass"${W}
            break;;
        [nN]* )
             echo "${G}Please provide username and password again."${W}
            echo
            ;;
        * )
            echo "${R}Invalid input. Please enter 'y' or 'n'."${W}
            ;;
    esac
done
elif [[ "$pd_pass_type" == "2" ]];then
while true; do
    read -p "${R}[${W}-${R}]${G}Input username [Lowercase]: "${W} user_name
    echo
    read -p "${R}[${W}-${R}]${Y}Do you want to continue with username ${C}$user_name ${Y}? (y/n) : "${W} choice
	echo
	choice="${choice:-y}"
	echo
	echo "${R}[${W}-${R}]${G}Continuing with answer: $choice"${W}
	sleep 0.3
    case $choice in
        [yY]* )
            echo "${R}[${W}-${R}]${G}Continuing with username ${C}$user_name "${W}
            break;;
        [nN]* )
             echo "${G}Please provide username again."${W}
            echo
            ;;
        * )
            echo "${R}Invalid input. Please enter 'y' or 'n'."${W}
            ;;
    esac
done
fi
    fi
}

#########################################################################
#### Update System And Install Required Packages Repo And Bssic Task ####
#########################################################################

function update_sys() {
	banner
    echo "${R}[${W}-${R}]${G}${BOLD} Updating System...."${W}
	echo
    pkg update -y -o Dpkg::Options::="--force-confold"
	pkg upgrade -y -o Dpkg::Options::="--force-confold"
}

function install_required_packages() {
	banner
    echo "${R}[${W}-${R}]${Y}${BOLD} Installling required packages..."${W}
	echo
	package_install_and_check "wget pv jq curl pulseaudio termux-am x11-repo tur-repo"
	update_sys
}

function install_desktop() {
    banner
	mkdir -p "$PREFIX/etc/termux-desktop"
	touch $config_file
	chmod +x $config_file
    echo "${R}[${W}-${R}]${G}${BOLD} Installing Xfce4 Desktop"${W}
	echo
	package_install_and_check "xfce4 xfce4-goodies xwayland kvantum"
	echo "de=\"xfce\"" >> $config_file
}

#########################################################################
############################### Theme Installer #########################
#########################################################################

function theme_installer() {
    banner
    echo "${R}[${W}-${R}]${G}${BOLD} Configuring Theme: ${C}${style_name}"${W}
	echo
	package_install_and_check "gnome-themes-extra"
    sleep 3
    banner
    echo "${R}[${W}-${R}]${G}${BOLD} Configuring Wallpapers..."${W}
	echo
	check_and_create_directory "$PREFIX/share/backgrounds"
	download_and_extract "https://raw.githubusercontent.com/MTaliko/termux-desktop/main/patch/xfce/look_${style_answer}/wallpaper.tar.gz" "$PREFIX/share/backgrounds/"
    banner
	check_and_create_directory "$HOME/.icons"
	download_and_extract "https://raw.githubusercontent.com/MTaliko/termux-desktop/main/patch/xfce/look_${style_answer}/icon.tar.gz" "$HOME/.icons"
	echo "${R}[${W}-${R}]${G}${BOLD} Installing Theme..."${W}
	echo
	check_and_create_directory "$HOME/.themes"
	download_and_extract "https://raw.githubusercontent.com/MTaliko/termux-desktop/main/patch/xfce/look_${style_answer}/theme.tar.gz" "$HOME/.themes"
	echo "${R}[${W}-${R}]${G} Making Additional Configuration..."${W}
	echo
	check_and_create_directory "$HOME/.config"
	config_dirs=(autostart cairo-dock dconf gtk-3.0 Mousepad pulse Thunar menu ristretto rofi xfce4)
        for the_config_dir in "${config_dirs[@]}"; do
		check_and_backup "$HOME/.config/$the_config_dir"
        done
	download_and_extract "https://raw.githubusercontent.com/MTaliko/termux-desktop/main/patch/xfce/look_${style_answer}/config.tar.gz" "$HOME/.config/"
	echo "current_style=\"$style_name\"" >> $config_file
}

function add_theme_change_option() {
	banner
	echo "${R}[${W}-${R}]${G}${BOLD} Adding Style Change Option"${W}
	echo
	check_and_create_directory "$PREFIX/etc/termux-desktop"
	wget -O $PREFIX/bin/change-td-style  https://raw.githubusercontent.com/MTaliko/termux-desktop/main/change-td-style
	chmod +x $PREFIX/bin/change-td-style
}

#########################################################################
################# Install Additional Packages For Theme #################
#########################################################################

function additional_required_package_installler() {
    banner
    echo "${R}[${W}-${R}]${G}${BOLD} Installing Additional Packages If Required..."${W}
	echo
	if [[ "$style_answer" == "2" ]] || [[ "$style_answer" == "5" ]] || [[ "$style_answer" == "6" ]]; then
	package_install_and_check "cairo-dock-core"
	elif [[ "$style_answer" == "2" ]] || [[ "$style_answer" == "6" ]]; then
	package_install_and_check "rofi"
	elif [[ "$style_answer" == "2" ]]; then
	package_install_and_check "fluent-icon-theme vala-panel-appmenu"
	elif [[ "$style_answer" == "4" ]]; then
    package_install_and_check "gtk2-engines-murrine"
	elif [[ "$style_answer" == "5" ]] || [[ "$style_answer" == "6" ]]; then
	cp $HOME/.config/xpple_menu/applications/* $PREFIX/share/applications/
	elif [[ "$style_answer" == "7" ]]; then
	install_font_for_style "7"
	else
	echo "${G} No Additional Packages Required For Theme: ${style_answer}"${W}
	sleep 1
	fi
}

#########################################################################
################# Setup Selected Style And Wallpapers ###################
#########################################################################

function setup_config() {
	cd ~
	if [[ ${style_answer} =~ ^[1-9][0-9]*$ ]]; then
	banner
	echo "${R}[${W}-${R}]${G}${BOLD} Configuring Xfce Style: ${C}${style_answer}"${W}
	theme_installer
	additional_required_package_installler
	fi
	if [[ "$ext_wall_answer" == "n" ]]; then
	echo "${R}[${W}-${R}]${C} Skipping Extra Wallpapers Setup..."${W}
	echo
	else
	echo "${R}[${W}-${R}]${G}${BOLD} Configuring Some Extra Wallpapers..."${W}
	echo
	check_and_create_directory "$PREFIX/share/backgrounds"
	download_and_extract "https://archive.org/download/wallpaper-extra.tar/wallpaper-extra.tar.gz" "$PREFIX/share/backgrounds/"
	fi
	
}

function setup_folder() {
	banner
	echo "${R}[${W}-${R}]${G}${BOLD} Configuring Storage..."${W}
	echo
	while true; do
	termux-setup-storage
	sleep 4
    if [[ -d ~/storage ]]; then
        break
    else
        echo "${R} Storage permission denied"${W}
    fi
    sleep 3
done
	cd $HOME
	termux-reload-settings
	directories=(Desktop Music Download Pictures Videos)
	for dir in "${directories[@]}"; do
	check_and_create_directory "$HOME/storage/shared/$dir"
	done
	check_and_create_directory "$HOME/Desktop"
	ln -s "$HOME/storage/shared/Music" "$HOME/"
	ln -s "$HOME/storage/shared/Download" "$HOME/Downloads"
	ln -s "$HOME/storage/shared/Pictures" "$HOME/"
	ln -s "$HOME/storage/shared/Videos" "$HOME/"
}

#########################################################################
##################### Hardware Acceleration Setup #######################
#########################################################################

function hw_config() {
	banner
	echo "${R}[${W}-${R}]${G}${BOLD} Configuring Hardware Acceleration"${W}
	echo
    wget https://raw.githubusercontent.com/MTaliko/termux-desktop/main/enable-hw-acceleration ; chmod +x enable-hw-acceleration ; . enable-hw-acceleration
	rm enable-hw-acceleration
}

#########################################################################
########################### Proot Distro Setup ##########################
#########################################################################

function distro_container_setup() {
	if [[ "$distro_add_answer" == "n" ]]; then
	banner
	echo "${R}[${W}-${R}]${C} Skipping Distro Container Setup..."${W}
	echo
	else
	banner
	echo "${R}[${W}-${R}]${G}${BOLD} Configuring Distro Container"${W}
	echo
	wget https://raw.githubusercontent.com/MTaliko/termux-desktop/main/distro-container-setup ; chmod +x distro-container-setup ; . distro-container-setup
	rm distro-container-setup
	fi
	echo "setup_distro_container=\"$distro_add_answer\"" >> $config_file
}

#########################################################################
################ Add Vnc And Termux:x11 Launch Scripts ##################
#########################################################################

function setup_vnc() {
    banner
    echo "${R}[${W}-${R}]${G}${BOLD} Configuring Vnc..."${W}
    echo
    package_install_and_check "tigervnc"
	package_install_and_check "xorg-xhost"
    check_and_create_directory "$HOME/.vnc"
    check_and_delete "$HOME/.vnc/xstartup"
    cat << EOF > "$HOME/.vnc/xstartup"
    startxfce4 &
EOF
    chmod +x "$HOME/.vnc/xstartup"
    check_and_delete "$PREFIX/bin/vncstart"
cat <<EOF > "$PREFIX/bin/vncstart"
${initialize_server_method}
$selected_hw_method vncserver
EOF
    chmod +x "$PREFIX/bin/vncstart"
    check_and_delete "$PREFIX/bin/vncstop"
cat <<'EOF' > "$PREFIX/bin/vncstop"
#!/data/data/com.termux/files/usr/bin/bash

if [[ "$1" == "-f" ]]; then
pkill Xtigervnc
else
display_numbers=$(vncserver -list | awk '/^:[0-9]+/ {print $1}')

for display in $display_numbers; do
    vncserver -kill "$display"
done
fi
rm $HOME/.vnc/localhost:*.log > /dev/null 2>&1
rm $PREFIX/tmp/.X1-lock > /dev/null 2>&1
rm $PREFIX/tmp/.X11-unix/X1 > /dev/null 2>&1
EOF
    chmod +x "$PREFIX/bin/vncstop"
	
}

function setup_termux_x11() {
	banner
        echo "${R}[${W}-${R}]${G}${BOLD} Configuring Termux:X11 "${W}
        echo
        package_install_and_check "termux-x11-nightly"
		sed -i '12s/^#//' $HOME/.termux/termux.properties
		cat <<EOF >> "$PREFIX/bin/tx11start"
#!/data/data/com.termux/files/usr/bin/bash

${initialize_server_method}
sleep 1
XDG_RUNTIME_DIR=\${TMPDIR} termux-x11 :1.0 &
sleep 1
am start --user 0 -n com.termux.x11/com.termux.x11.MainActivity > /dev/null 2>&1
sleep 1
env DISPLAY=:1.0 $selected_hw_method dbus-launch --exit-with-session xfce4-session & > /dev/null 2>&1

sleep 5
process_id=\$(ps -aux | grep '[x]fce4-screensaver' | awk '{print \$2}')
kill "\$process_id" > /dev/null 2>&1
EOF
chmod +x $PREFIX/bin/tx11start

cat <<'EOF' > "$PREFIX/bin/tx11stop"
#!/data/data/com.termux/files/usr/bin/bash
termux_x11_pid=$(pgrep -f "/system/bin/app_process / com.termux.x11.Loader :1.0")
xfce_pid=$(pgrep -f "xfce4-session")
if [[ -n "$termux_x11_pid" ]] || [[ -n "$xfce_pid" ]]; then
kill -9 "$termux_x11_pid" "$xfce_pid" > /dev/null 2>&1
pkill -f com.termux.x11 > /dev/null 2>&1
echo "Termux:X11 Stopped Successfully"
fi
EOF
chmod +x $PREFIX/bin/tx11stop
}

function gui_launcher() {
	check_and_delete "$PREFIX/bin/gui"
	
	if [[ "gui_mode" == "1" ]]; then
	setup_termux_x11
	echo "selected_gui_mode=\"termux_x11\"" >> $config_file
cat << EOF > "$PREFIX/bin/gui"
#!/data/data/com.termux/files/usr/bin/bash
case \$1 in
--start|-l)
tx11start
;;
--stop|-s)
tx11stop
;;
--help|-h)
echo -e "${G} Use ${C}gui --start / gui -l ${G}to start termux:x11\n Use ${C}gui --stop / gui -s ${G}to stop termux:x11"${W}
;;
*)
echo "${R}Invalid choise"${W}
gui -h
;;
esac
EOF
	elif [[ "gui_mode" == "2" ]]; then
	setup_vnc
	echo "selected_gui_mode=\"vnc\"" >> $config_file
cat << EOF > "$PREFIX/bin/gui"
#!/data/data/com.termux/files/usr/bin/bash
case \$1 in
--start|-l)
vncstart
;;
--stop|-s)
vncstop
;;
--help|-h)
echo -e "${G} Use ${C}gui --start / gui -l ${G}to start vnc\n Use ${C}gui --stop / gui -s ${G}to stop vnc"${W}
;;
*)
echo "${R}Invalid choise"${W}
gui -h
;;
esac
EOF
	elif [[ "gui_mode" == "3" ]]; then
	setup_termux_x11
	setup_vnc
	echo "selected_gui_mode=\"both\"" >> $config_file
cat << EOF > "$PREFIX/bin/gui"
#!/data/data/com.termux/files/usr/bin/bash
case \$1 in
    --start|-l)
        case \$2 in
            tx11)
                tx11start
                ;;
            vnc)
                vncstart
                ;;
            *)
                echo -e "${R}Invalid choise. Use ${C}tx11${R} or ${C}vnc ${G}with it${W}"
                ;;
        esac
        ;;
    --stop|-s)
        case \$2 in
            tx11)
                tx11stop
                ;;
            vnc)
                vncstop
                ;;
            *)
                echo -e "${R}Invalid choise. Use ${C}tx11${R} or ${C}vnc ${G}with it${W}"
                ;;
        esac
        ;;
    --help|-h)
        echo -e "${G}Use ${C}gui --start tx11/vnc${G} or ${C}gui -l tx11/vnc${G} to start a gui"
        echo -e "Use ${C}gui --stop tx11/vnc${G} or ${C}gui -s tx11/vnc${G} to stop a gui${W}"
        ;;
    *)
        echo -e "${R}Invalid choice${W}"
        gui -h
        ;;
esac
EOF
	else
setup_termux_x11
echo "selected_gui_mode=\"termux_x11\"" >> $config_file
cat << EOF > "$PREFIX/bin/gui"
#!/data/data/com.termux/files/usr/bin/bash
case \$1 in
--start|-l)
tx11start
;;
--stop|-s)
tx11stop
;;
--help|-h)
echo -e "${G} Use ${C}gui --start / gui -l ${G}to start termux:x11\n Use ${C}gui --stop / gui -s ${G}to stop termux:x11"${W}
;;
*)
echo "${R}Invalid choise"${W}
gui -h
;;
esac
EOF
	fi
chmod +x "$PREFIX/bin/gui"
}

#########################################################################
########################### Install Browser #############################
#########################################################################

function browser_installer() {
	banner
	if [[ ${browser_answer} == "1" ]]; then
		package_install_and_check "firefox"
	echo "installed_browser=\"firefox\"" >> $config_file
	elif [[ ${browser_answer} == "2" ]]; then
	package_install_and_check "chromium"
	echo "installed_browser=\"chromium\"" >> $config_file
	elif [[ ${browser_answer} == "3" ]]; then
	package_install_and_check "firefox chromium"
	echo "installed_browser=\"both\"" >> $config_file
	elif [[ ${browser_answer} == "4" ]]; then
    echo "${R}[${W}-${R}]${C} Skipping Browser Installation..."${W}
	echo "installed_browser=\"skip\"" >> $config_file
	echo
	sleep 2
	else
	package_install_and_check "firefox"
	echo "installed_browser=\"firefox\"" >> $config_file
	fi
}

#########################################################################
############################## Install Ide ##############################
#########################################################################

function ide_installer() {
	banner
	if [[ ${ide_answer} == "1" ]]; then
		package_install_and_check "code-oss code-is-code-oss"
	echo "installed_ide=\"code\"" >> $config_file
	elif [[ ${ide_answer} == "2" ]]; then
		package_install_and_check "geany"
	echo "installed_ide=\"geany\"" >> $config_file
	elif [[ ${ide_answer} == "3" ]]; then
		package_install_and_check "code-oss code-is-code-oss geany"
	echo "installed_ide=\"both\"" >> $config_file
	elif [[ ${ide_answer} == "4" ]]; then
    echo "${R}[${W}-${R}]${C} Skipping Ide Installation..."${W}
	echo
	echo "installed_ide=\"skip\"" >> $config_file
	sleep 2
	else
		package_install_and_check "code-oss code-is-code-oss"
	echo "installed_ide=\"code\"" >> $config_file
	fi
}

#########################################################################
######################### Install Media Player ##########################
#########################################################################

function media_player_installer() {
	banner
	if [[ ${player_answer} == "1" ]]; then
		package_install_and_check "vlc-qt-static"
	echo "installed_media_player=\"vlc\"" >> $config_file
	elif [[ ${player_answer} == "2" ]]; then
		package_install_and_check "audacious"
	echo "installed_media_player=\"audacious\"" >> $config_file
	elif [[ ${player_answer} == "3" ]]; then
		package_install_and_check "vlc-qt-static audacious"
	echo "installed_media_player=\"both\"" >> $config_file
	elif [[ ${player_answer} == "4" ]]; then
    echo "${R}[${W}-${R}]${C} Skipping Media Player Installation..."${W}
	echo
	sleep 2
	echo "installed_media_player=\"skip\"" >> $config_file
	else
		package_install_and_check "vlc-qt-static"
	echo "installed_media_player=\"vlc\"" >> $config_file
	fi
}

#########################################################################
######################## Install Photo Editor ###########################
#########################################################################

function photo_editor_installer() {
	banner
	if [[ ${photo_editor_answer} == "1" ]]; then
		package_install_and_check "gimp"
	echo "installed_photo_editor=\"gimp\"" >> $config_file
	elif [[ ${photo_editor_answer} == "2" ]]; then
		package_install_and_check "inkscape"
	echo "installed_photo_editor=\"inkscape\"" >> $config_file
	elif [[ ${photo_editor_answer} == "3" ]]; then
		package_install_and_check "gimp inkscape"
	echo "installed_photo_editor=\"both\"" >> $config_file
	elif [[ ${photo_editor_answer} == "4" ]]; then
    echo "${R}[${W}-${R}]${C} Skipping Photo Editor Installation..."${W}
	echo
	sleep 2
	echo "installed_photo_editor=\"skip\"" >> $config_file
	else
		package_install_and_check "gimp"
	echo "installed_photo_editor=\"gimp\"" >> $config_file
	fi

}

#########################################################################
####################### Install Software Manager ########################
#########################################################################

function setup_synaptic() {
	banner
    if [[ "$synaptic_answer" == "n" ]]; then
	banner
    echo "${R}[${W}-${R}]${C} Skipping Synaptic Setup.."${W}
	echo
    sleep 1.5
	else
	echo "${R}[${W}-${R}]${G} Installing Synaptic Graphical Package Manager..."${W}
	echo
	package_install_and_check "synaptic"
	fi
	echo "install_synaptic=\"$synaptic_answer\"" >> $config_file
}

#########################################################################
#################### Setup Zsh And Terminal Utility #####################
#########################################################################

function setup_zsh() {
	banner
    if [[ "$zsh_answer" == "n" ]]; then
	echo "${R}[${W}-${R}]${C} Canceling Zsh Setup..."${W}
    sleep 1.5
	shell_name="bash"
	else
	shell_name="zsh"
	echo "${R}[${W}-${R}]${G}${BOLD} Configuring Zsh.."${W}
	echo
	package_install_and_check "zsh git"
	wget https://raw.githubusercontent.com/sabamdarif/short-linux-scripts/main/install-zsh.sh && bash install-zsh.sh
fi
echo "setup_zsh=\"$zsh_answer\"" >> $config_file
}

function terminal_utility_setup() {
  if [[ "$terminal_utility_setup_answer" == "n" ]];then
    banner
	echo "${R}[${W}-${R}]${C}Skipping Terminal Utility Setup..."${W}
	echo
	else
	banner
	echo "${R}[${W}-${R}]${C}${BOLD} Configuring Terminal Utility..."${W}
	echo
	check_and_backup "$PREFIX/etc/motd"
	check_and_backup "$PREFIX/etc/motd-playstore"
    check_and_backup "$PREFIX/etc/motd.sh"
	wget -O $PREFIX/etc/motd.sh https://raw.githubusercontent.com/MTaliko/termux-desktop/main/other/motd.sh
	echo "bash $PREFIX/etc/motd.sh" > $PREFIX/etc/termux-login.sh
	check_and_create_directory "$HOME/.termux"
	check_and_backup "$HOME/.termux/colors.properties"
	wget -O $HOME/.termux/colors.properties https://raw.githubusercontent.com/MTaliko/termux-desktop/main/other/colors.properties
	package_install_and_check "nala bat eza zoxide fastfetch"
	cat <<'EOF' >> "$HOME/.${shell_name}rc"
alias apt='nala $@'
alias pkg='nala $@'
alias cat='bat $@'
alias ls='eza --icons $@'
alias mkdir='mkdir -p'
alias neofetch='fastfetch'
#######################################################
# SPECIAL FUNCTIONS
#######################################################
# Extracts any archive(s) (if unp isn't installed)
extract() {
	for archive in "$@"; do
		if [ -f "$archive" ]; then
			case $archive in
			*.tar.bz2) tar xvjf $archive ;;
                        *.tar.xz) tar -xvf $archive ;;
                        *.tar.gz) tar -xzvf $archive ;;
			*.tar.gz) tar xvzf $archive ;;
			*.bz2) bunzip2 $archive ;;
			*.rar) rar x $archive ;;
			*.gz) gunzip $archive ;;
			*.tar) tar xvf $archive ;;
			*.tbz2) tar xvjf $archive ;;
			*.tgz) tar xvzf $archive ;;
			*.zip) unzip $archive ;;
			*.Z) uncompress $archive ;;
			*.7z) 7z x $archive ;;
			*) echo "don't know how to extract '$archive'..." ;;
			esac
		else
			echo "'$archive' is not a valid file!"
		fi
	done
}
# Searches for text in all files in the current folder
ftext() {
	# -i case-insensitive
	# -I ignore binary files
	# -H causes filename to be printed
	# -r recursive search
	# -n causes line number to be printed
	# optional: -F treat search term as a literal, not a regular expression
	# optional: -l only print filenames and not the matching lines ex. grep -irl "$1" *
	grep -iIHrn --color=always "$1" . | less -r
}
# Copy file with a progress bar
cpp() {
	set -e
	strace -q -ewrite cp -- "${1}" "${2}" 2>&1 |
		awk '{
	count += $NF
	if (count % 10 == 0) {
		percent = count / total_size * 100
		printf "%3d%% [", percent
		for (i=0;i<=percent;i++)
			printf "="
			printf ">"
			for (i=percent;i<100;i++)
				printf " "
				printf "]\r"
			}
		}
	END { print "" }' total_size="$(stat -c '%s' "${1}")" count=0
}
# Copy and go to the directory
cpg() {
	if [ -d "$2" ]; then
		cp "$1" "$2" && cd "$2"
	else
		cp "$1" "$2"
	fi
}
# Move and go to the directory
mvg() {
	if [ -d "$2" ]; then
		mv "$1" "$2" && cd "$2"
	else
		mv "$1" "$2"
	fi
}
# Create and go to the directory
mkdirg() {
	mkdir -p "$1"
	cd "$1"
}
EOF
cat <<EOF >> "$HOME/.${shell_name}rc"
#set zoxide as cd
eval "\$(zoxide init --cmd cd ${shell_name})"
EOF
termux-reload-settings
sleep 2
	fi
echo "terminal_utility_setup=\"$terminal_utility_setup_answer\"" >> $config_file
}

#########################################################################
############################ Install Fonts ##############################
#########################################################################

function setup_fonts() {
	if [[ "$terminal_utility_setup_answer" == "y" ]];then
	banner
	echo "${R}[${W}-${R}]${G}${BOLD} Installing Fonts..."${W}
	package_install_and_check "nerdfix fontconfig-utils"
	check_and_create_directory "$HOME/.termux"
	check_and_create_directory "$HOME/.fonts"
	check_and_backup "$HOME/.termux/font.ttf"
	wget -O $HOME/.termux/font.ttf https://raw.githubusercontent.com/MTaliko/termux-desktop/main/other/font.ttf
	cp $HOME/.termux/font.ttf $HOME/.fonts/
	fc-cache -f
	fi
}

#########################################################################
############################ Install Wine ###############################
#########################################################################

function setup_wine() {
	banner
    if [[ "$wine_answer" == "1" ]]; then
	echo "${R}[${W}-${R}]${G}${BOLD} Installing Wine Natively In Termux"${W}
	echo
		package_install_and_check "wine-stable winetricks"
		echo "setup_wine=\"default-wine\"" >> $config_file
	elif [[ "$wine_answer" == "2" ]]; then
	echo "${R}[${W}-${R}]${G}${BOLD} Use Mobox Installer To Install Wine In Termux"${W}
	echo
	curl -s -o ~/x https://raw.githubusercontent.com/olegos2/mobox/main/install && . ~/x
	echo "setup_wine=\"mobox\"" >> $config_file
	elif [[ "$wine_answer" == "3" ]]; then
	echo "${R}[${W}-${R}]${C} Skipping wine Installation..."${W}
	echo "setup_wine=\"skip\"" >> $config_file
else
    echo "${R}[${W}-${R}]${G}Installing Wine Natively In Termux"${W}
	echo
		package_install_and_check "wine-stable winetricks"
		echo "setup_wine=\"default-wine\"" >> $config_file
fi
}

#########################################################################
################################ Notes ##################################
#########################################################################

function notes() {
	banner
	echo "${R}[${W}-${R}]${G}${BOLD} Installation Successfull..."${W}
	echo
	sleep 2
	echo "${R}[${W}-${R}]${C}${BOLD} Now Restart Termux ${G}(Must)"${W}
	echo
	echo "${R}[${W}-${R}]${C}${BOLD} See Uses Section in github to know how to use it"${W}
	echo
	echo "${R}[${W}-${R}]${C} URL:- ${B}https://github.com/MTaliko/termux-desktop/blob/main/README.md#uses"${W}
	echo
	if [[ "$distro_add_answer" == "y" ]]; then
	echo "${R}[${W}-${R}]${C}${BOLD} See how to use distro container"${W}
	echo
	echo "${R}[${W}-${R}]${C} URL:- ${B}https://github.com/MTaliko/termux-desktop/blob/main/proot-caontainer.md"${W}
	fi
}

#########################################################################
################################ Remove #################################
#########################################################################

function remove_termux_desktop() {
	if [[ ! -e "$config_file" ]]; then
	echo "${R}[${W}-${R}]${C}${BOLD} Please Install Termux Desktop First"${W}
	exit 0
	else
	banner
	echo "${R}[${W}-${R}]${R}${BOLD} Remove Termux Desktop"${W}
	echo ""
	confirmation_y_or_n "Are You Sure You Want To Remove Termux Desktop Completely" ask_remove
	if [[ "$ask_remove" == "n" ]]; then
	echo "${R}[${W}-${R}]${G}${BOLD}Canceling..."${W}
	exit 0
	else
	echo "${R}[${W}-${R}]${R}${BOLD} Removeing Termux Desktop"${W}
	sleep 3
	. $config_file
	#remove basic packages
	package_check_and_remove "pulseaudio x11-repo tur-repo"
	#remove desktop related packages
	if [[ "$de" == "xfce" ]];then
	package_check_and_remove "xfce4 xfce4-goodies xwayland kvantum"
	fi
	#remove zsh
	if [[ "$setup_zsh" == "y" ]];then
	package_check_and_remove "zsh"
	check_and_delete ".oh-my-zsh .zsh_history .zshrc"
	fi
	#remove terminal utility
	if [[ "$terminal_utility_setup" == "y" ]];then
	check_and_restore "$PREFIX/etc/motd"
	check_and_restore "$PREFIX/etc/motd-playstore"
	check_and_restore "$PREFIX/etc/motd.sh"
	check_and_delete "$PREFIX/etc/motd.sh $PREFIX/etc/termux-login.sh $HOME/.termux $HOME/.fonts/font.ttf"
	package_check_and_remove "nerdfix fontconfig-utils nala bat eza"
	fi
	#remove browser
	if [[ "$installed_browser" == "firefox" ]];then
	package_check_and_remove "firefox"
	elif [[ "$installed_browser" == "chromium" ]];then
	package_check_and_remove "chromium"
	elif [[ "$installed_browser" == "both" ]];then
	package_check_and_remove "firefox chromium"
	fi
	#remove ide
	if [[ "$installed_ide" == "code" ]];then
	package_check_and_remove "code-oss code-is-code-oss"
	elif [[ "$installed_ide" == "geany" ]];then
	package_check_and_remove "geany"
	elif [[ "$installed_ide" == "both" ]];then
	package_check_and_remove "code-oss code-is-code-oss geany"
	fi
	#remove media player
	if [[ "$installed_media_player" == "vlc" ]];then
	package_check_and_remove "vlc-qt-static"
	elif [[ "$installed_media_player" == "audacious" ]];then
	package_check_and_remove "audacious"
	elif [[ "$installed_media_player" == "both" ]];then
	package_check_and_remove "vlc-qt-static audacious"
	fi
	#remove photo editor
	if [[ "$installed_photo_editor" == "gimp" ]];then
	package_check_and_remove "gimp"
	elif [[ "$installed_photo_editor" == "audacious" ]];then
	package_check_and_remove "audacious"
	elif [[ "$installed_photo_editor" == "both" ]];then
	package_check_and_remove "gimp audacious"
	fi
	#remove synaptic
	if [[ "$install_synaptic" == "y" ]];then
	package_check_and_remove "synaptic"
	fi
	#remove wine
	if [[ "$setup_wine" == "default-wine" ]];then
	package_check_and_remove "wine winetricks"
	# elif [[ "$setup_wine" == "mobox" ]];then
	fi
	#remove styles
	if [[ "$current_style" == "Modern Style" ]] || [[ "$current_style" == "MacOS Inspired-1 Style" ]] || [[ "$current_style" == "MacOS Inspired-2 Style" ]];then
	package_check_and_remove "cairo-dock-core"
	elif [[ "$current_style" == "Modern Style" ]] || [[ "$current_style" == "MacOS Inspired-2 Style" ]];then
	package_check_and_remove "rofi"
	elif [[ "$current_style" == "Modern Style" ]];then
	package_check_and_remove "fluent-icon-theme vala-panel-appmenu"
	elif [[ "$current_style" == "Windows10 Style" ]];then
	package_check_and_remove "gtk2-engines-murrine"
	fi
	check_and_delete "$PREFIX/share/backgrounds $HOME/.themes $HOME/.icons $PREFIX/bin/change-td-style"
	check_and_delete "$HOME/.config/$the_config_dir"
	#remove hw packages
	if [[ "$distro_answer" == "3" ]];then
	package_check_and_remove "mesa-vulkan-icd-freedreno mesa-zink"
	else
	package_check_and_remove "mesa-zink virglrenderer-mesa-zink vulkan-loader-android angle-android virglrenderer-android"
	fi
	#remove distro container
	if [[ "$setup_distro_container" == "y" ]];then
	if [[ "$distro_answer" == "1" ]];then
	proot-distro remove debian
	elif [[ "$distro_answer" == "2" ]];then
	proot-distro remove ubuntu
	fi
	proot-distro clear-cache
	package_check_and_remove "proot-distro"
	fi
	#remove vnc and termux x11
	check_and_delete "$PREFIX/bin/gui"
	if [[ "$selected_gui_mode" == "termux_x11" ]];then
	package_check_and_remove "termux-x11-nightly"
	check_and_delete "$PREFIX/bin/tx11start $PREFIX/bin/tx11stop"
	elif [[ "$selected_gui_mode" == "vnc" ]];then
	package_check_and_remove "tigervnc xorg-xhost"
	check_and_delete "$HOME/.vnc/xstartup $PREFIX/bin/vncstart $PREFIX/bin/vncstop $PREFIX/bin/gui $PREFIX/bin/tx11start $PREFIX/bin/tx11stop"
	elif [[ "$selected_gui_mode" == "both" ]];then
	package_check_and_remove "termux-x11-nightly tigervnc xorg-xhost"
	check_and_delete "$PREFIX/bin/tx11start $PREFIX/bin/tx11stop $HOME/.vnc/xstartup $PREFIX/bin/vncstart $PREFIX/bin/vncstop $PREFIX/bin/gui $PREFIX/bin/tx11start $PREFIX/bin/tx11stop"
	fi
	check_and_delete "$PREFIX/etc/termux-desktop"
	fi
	fi
}

function install_termux_desktop() {
update_sys
sleep 2
termux-wake-lock
sleep 2
cd $HOME
install_required_packages
questions
if [[ "$distro_add_answer" == "y" ]]; then
distro_questions
fi
hw_questions
setup_folder
setup_zsh
setup_fonts
install_desktop
browser_installer
ide_installer
media_player_installer
photo_editor_installer
setup_synaptic
setup_wine
if [[ "$style_answer" == "0" ]]; then
    banner
	echo "${R}[${W}-${R}]${G}${BOLD} Configuring Stock Xfce Style..."${W}
	echo
	echo "current_style=\"Stock\"" >> $config_file
else
setup_config
fi
hw_config
distro_container_setup
gui_launcher
terminal_utility_setup
add_theme_change_option
notes
termux-wake-unlock
}

if [[ "$1" == "-r" ]]; then
    remove_termux_desktop
elif [[ "$1" == "" ]]; then
    install_termux_desktop
else
    echo "${R}[${W}-${R}]${G}${BOLD} Use ${C}setup-termux-desktop -r ${G}to remove Termux desktop or type only ${C}setup-termux-desktop ${G}to continue the installation."${W}
fi
